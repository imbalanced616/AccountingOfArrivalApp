//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccountingOfArrivalApp.Classes
{
    using AccountingOfArrivalApp.Models;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Windows.Controls;

    public partial class CompositionsOfInvoice : INotifyPropertyChanged
    {
        public int idComposition { get; set; }
        public Nullable<int> idInvoice { get; set; }
        public Nullable<int> idMaterial { get; set; }
        private int quantityDistributed;
        public int QuantityDistributed
        {
            get
            {
                if (quantityDistributed == 0)
                    quantityDistributed = ClassHelper.db.Database.SqlQuery<int?>("select sum(PartOfQuantity) from Nomenclature.dbo.Movement M join AccountingOfArrival.dbo.CompositionsOfInvoice C on C.idComposition = M.idComposition where M.idComposition = @idC and idMaterial = @idM and ArrivalOrExpenditure = 0", new SqlParameter("@idC", idComposition), new SqlParameter("@idM", idMaterial)).Single() == null
                        ? 0 : ClassHelper.db.Database.SqlQuery<int>("select sum(PartOfQuantity) from Nomenclature.dbo.Movement M join AccountingOfArrival.dbo.CompositionsOfInvoice C on C.idComposition = M.idComposition where M.idComposition = @idC and idMaterial = @idM and ArrivalOrExpenditure = 0", new SqlParameter("@idC", idComposition), new SqlParameter("@idM", idMaterial)).Single();
                return quantityDistributed;
            }
            set
            {
                quantityDistributed = value;
                OnPropertyChanged("QuantityDistributed");
                OnPropertyChanged("DifferenceQuantity");
                OnPropertyChanged("Background");
            }
        }
        private Nullable<int> quantity;
        public Nullable<int> Quantity
        {
            get { return quantity; }
            set
            {
                quantity = value;
                OnPropertyChanged("Amount");
            }
        }
        public Nullable<int> DifferenceQuantity { get { return Quantity - QuantityDistributed; } }
        private Nullable<double> pricePerUnit;
        public Nullable<double> PricePerUnit
        {
            get { return pricePerUnit; }
            set
            {
                pricePerUnit = value;
                OnPropertyChanged("Amount");
            }
        }
        public double Amount { get { return Convert.ToDouble(Quantity * PricePerUnit); } }
        public string Background { get { return QuantityDistributed == Quantity ? "LawnGreen" : "Red"; } }

        public virtual InvoicesOnArrival InvoicesOnArrival { get; set; }
        public virtual Materials Materials { get { return Materials.FirstOrDefault((int)idMaterial); } }

        public event PropertyChangedEventHandler PropertyChanged;
        public void OnPropertyChanged([CallerMemberName] string prop = "") => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(prop));

        public static List<CompositionsOfInvoice> ToList()
        {
            return ClassHelper.db.CompositionsOfInvoice.ToList();
        }
        public static List<CompositionsOfInvoice> ToContextList(int idInvoice)
        {
            return ClassHelper.db.CompositionsOfInvoice.Where(x => x.idInvoice == idInvoice).ToList();
        }
        public static List<CompositionsOfInvoice> ToListByFilter(MenuItem menuItem, int filterBy, List<CompositionsOfInvoice> list = null)
        {
            switch (filterBy)
            {
                case 0: return ToList().Where(x => x.idInvoice == Convert.ToInt32(menuItem.Header.ToString().Substring(menuItem.Header.ToString().IndexOf("№") + 1))).ToList();
                case 1: return ToList().Where(x => x.Materials.Type.Name == menuItem.Header.ToString()).ToList();
                case 2: return ToList().Where(x => x.Background == (menuItem.Header.ToString() == "Распределено" ? "LawnGreen" : "Red")).ToList();
                case 3: return list.Where(x => x.Materials.Type.Name == menuItem.Header.ToString()).ToList();
                default: return ToList();
            }
        }
        public static List<CompositionsOfInvoice> ToListBySearch(string search)
        {
            return ToList().Where(x => x.idInvoice.ToString().Contains(search) || x.Materials.Name.ToLower().Contains(search) || x.Materials.Type.Name.ToLower().Contains(search) || x.Materials.DrawingNumber.ToLower().Contains(search) || x.DifferenceQuantity.ToString().Contains(search) || x.Background.ToLower().Contains(search)).ToList();
        }
        public static void AddOrUpdate(CompositionsOfInvoice c)
        {
            if (c.idComposition == 0) ClassHelper.db.Database.ExecuteSqlCommand("insert into CompositionsOfInvoice values (@invoice,@material,@quantity,@price)", new SqlParameter("@invoice", c.idInvoice), new SqlParameter("@material", c.idMaterial), new SqlParameter("@quantity", c.Quantity), new SqlParameter("@price", c.PricePerUnit));
            else ClassHelper.db.Database.ExecuteSqlCommand("update CompositionsOfInvoice set idInvoice = @invoice, idMaterial = @material, Quantity = @quantity, PricePerUnit = @price where idComposition = @id", new SqlParameter("@invoice", c.idInvoice), new SqlParameter("@material", c.idMaterial), new SqlParameter("@quantity", c.Quantity), new SqlParameter("@price", c.PricePerUnit), new SqlParameter("@id", c.idComposition));
        }
        public static int RemoveAtId(int id)
        {
            return ClassHelper.db.Database.ExecuteSqlCommand("delete from CompositionsOfInvoice where idComposition = @id", new SqlParameter("@id", id));
        }
    }
}
